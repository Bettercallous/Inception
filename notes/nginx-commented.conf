server {

# The server listens for incoming connections on port 443, which is the default port for HTTPS traffic.
	listen 443 ssl;

# The directive server name specifies the domain names for which this server block will be responsible. Requests coming to either www.oubelhaj.1337.ma or oubelhaj.1337.ma will be handled by this server block.
	server_name www.login.42.fr login.42.fr;

# The ssl_certificate and ssl_certificate_key directives specify the locations of the SSL/TLS certificate and private key, respectively, that will be used to encrypt the traffic. 
	ssl_certificate /etc/nginx/ssl/oubelhaj.42.fr.crt;
	ssl_certificate_key /etc/nginx/ssl/oubelhaj.42.fr.key;

# The ssl_protocols directive specifies the TLS protocols that the server should support.
	ssl_protocols TLSv1.3;

# The index directive specifies the default file that should be served when a client requests a directory on the server. The root directive specifies the root directory that should be used to search for files.
	index index.php;
	root /var/www/html;

# The location directive defines a block of configuration that applies to a specific location, which is specified using a regular expression. In this case, the regular expression ~ [^/]\\.php(/|$) matches any request that ends in .php and is not preceded by a / character.

	location ~ \.php$ {

# The try_files directive attempts to serve the requested file, and if it does not exist, it will return a 404 error.
        try_files $uri =404;

# This directive specifies the FastCGI server to which PHP requests should be passed for processing. In this case, it's passing requests to a server named wordpress on port 9000.
        fastcgi_pass wordpress:9000;

# This directive includes FastCGI parameters necessary for passing PHP requests.
        include fastcgi_params;

# The fastcgi_param directive sets a FastCGI parameter. The SCRIPT_FILENAME parameter specifies the path to the PHP script that should be executed.
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }

}


	location ~ \.php$
    \ escapes the dot (.), so it matches a literal dot.
    \.php matches any URI ending with .php.
    $ anchors the match to the end of the URI.